#AUTOGENERATED! DO NOT EDIT! File to edit: dev/60_medical_imaging.ipynb (unless otherwise specified).

__all__ = ['DcmDataset', 'DcmTag', 'DcmMultiValue', 'dcmread', 'as_dict', 'from_dicoms', 'scaled_px']

#Cell
from ..torch_basics import *
from ..test import *
from ..core import *
from ..layers import *
from ..data.all import *
from ..optimizer import *
from ..learner import *
from ..metrics import *
from ..vision import models

import pydicom
from pydicom.dataset import Dataset as DcmDataset
from pydicom.tag import BaseTag as DcmTag
from pydicom.multival import MultiValue as DcmMultiValue

#Cell
def _split_elem(res,k,v):
    if not isinstance(v,DcmMultiValue): return
    res[f'Multi{k}'] = 1
    for i,o in enumerate(v): res[f'{k}{"" if i==0 else i}']=o

#Cell
@patch
def dcmread(self:Path): return pydicom.dcmread(str(self))

#Cell
def _cast_dicom_special(x):
    cls = x.__class__
    if not cls.__module__.startswith('pydicom'): return x
    return cls.__base__(x)

#Cell
@patch
def as_dict(self:DcmDataset, fname, px_summ=True):
    pxdata = (0x7fe0,0x0010)
    vals = [self[o] for o in self.keys() if o != pxdata]
    its = [(v.keyword,v.value) for v in vals]
    res = dict(its)
    res['fname'] = fname
    for k,v in its: _split_elem(res,k,v)
    if not px_summ: return res
    stats = 'min','max','mean','std'
    try:
        pxs = self.pixel_array
        for f in stats: res['img_'+f] = getattr(pxs,f)()
    except Exception as e:
        for f in stats: res['img_'+f] = 0
        print(res,e)
    for k in res: res[k] = _cast_dicom_special(res[k])
    return res

#Cell
def _dcm2dict(px_summ, fn):
    dcm = fn.dcmread()
    try: return dcm.as_dict(fn.name, px_summ=px_summ)
    finally: del(dcm)

#Cell
@delegates(parallel)
def _from_dicoms(cls, fns, px_summ=True, **kwargs): return pd.DataFrame(parallel(partial(_dcm2dict,px_summ), fns, **kwargs))
pd.DataFrame.from_dicoms = classmethod(_from_dicoms)

#Cell
@patch_property
def scaled_px(self:DcmDataset):
    "`pixel_array` scaled by `RescaleSlope` and `RescaleIntercept"
    img = self.pixel_array
    return img*self.RescaleSlope + self.RescaleIntercept